(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Editors"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Editor = void 0;
    const Editors_1 = require("./Editors");
    class Editor {
        constructor(id, name, data) {
            if (data === null || data === undefined) {
                throw new Error("No valid data argument");
            }
            this.themeSelect = document.createElement("select");
            this.themeSelect.addEventListener("change", () => {
                this.theme(this.themeSelect.value);
            });
            this._themes = [];
            this.addTheme("ashgrey");
            this.addTheme("blue");
            this.addTheme("brown");
            this.addTheme("cyan");
            this.addTheme("dark");
            this.addTheme("fedex");
            this.addTheme("gameboy");
            this.addTheme("gold");
            this.addTheme("green");
            this.addTheme("grey");
            this.addTheme("greyorange");
            this.addTheme("light");
            this.addTheme("moonlight");
            this.addTheme("nautilus");
            this.addTheme("night-sky");
            this.addTheme("one-dark");
            this.addTheme("orange");
            this.addTheme("peach");
            this.addTheme("pink");
            this.addTheme("purple");
            this.addTheme("rebeccapurple");
            this.addTheme("red");
            this.addTheme("starbell");
            this.addTheme("sunlight");
            this.addTheme("trafficlights");
            this.addTheme("tuftsblue");
            this.addTheme("yellow");
            this.addTheme("neu-blue");
            this.addTheme("neu-caribbean");
            this.addTheme("neu-crystalgrape");
            this.addTheme("neu-dark");
            this.addTheme("neu-ecofriendly");
            this.addTheme("neu-expedia");
            this.addTheme("neu-gold");
            this.addTheme("neu-greysun");
            this.addTheme("neu-light");
            this.addTheme("neu-moon");
            this.addTheme("neu-orange");
            this.addTheme("neu-pink");
            this.addTheme("neu-silver");
            this.root = Editors_1.EditorGroup.createRoot(`${id}_editor`, name, data, document.body, this.themeSelect);
            const rootTitle = this.root.element.querySelector(".editor-item-title");
            const rootName = rootTitle === null || rootTitle === void 0 ? void 0 : rootTitle.querySelector(".editor-item-name");
            const rootNameB = rootTitle === null || rootTitle === void 0 ? void 0 : rootTitle.querySelector("b");
            let initialX = 0, initialY = 0, currentX = 0, currentY = 0, offsetX = 0, offsetY = 0;
            rootTitle === null || rootTitle === void 0 ? void 0 : rootTitle.addEventListener("mousedown", (downEvent) => {
                if (downEvent.target !== rootName && downEvent.target !== rootTitle && downEvent.target !== rootNameB) {
                    return;
                }
                downEvent.preventDefault();
                initialX = downEvent.clientX - offsetX;
                initialY = downEvent.clientY - offsetY;
                rootTitle.classList.add("dragging");
                document.onmouseup = () => {
                    document.onmouseup = null;
                    document.onmousemove = null;
                    initialX = currentX;
                    initialY = currentY;
                    rootTitle.classList.remove("dragging");
                };
                document.onmousemove = (moveEvent) => {
                    moveEvent.preventDefault();
                    currentX = moveEvent.clientX - initialX;
                    currentY = moveEvent.clientY - initialY;
                    offsetX = currentX;
                    offsetY = currentY;
                    this.root.element.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;
                };
            });
            this.root.element.classList.add("editor-root");
            this.customize();
            this.top().right().theme("light");
        }
        get data() {
            return this.root.data;
        }
        addButton(name, label, autoMap = true) {
            return this.root.addButton(name, label, autoMap);
        }
        addGroup(name, title, collapsed = true, customParent) {
            return this.root.addGroup(name, title, collapsed, customParent);
        }
        addProperty(name, label, type, value, autoMap = true) {
            return this.root.addProperty(name, label, type, value, autoMap);
        }
        top() {
            this.root.element.classList.remove("editor-bottom");
            this.root.element.classList.add("editor-top");
            return this;
        }
        bottom() {
            this.root.element.classList.remove("editor-top");
            this.root.element.classList.add("editor-bottom");
            return this;
        }
        left() {
            this.root.element.classList.remove("editor-right");
            this.root.element.classList.add("editor-left");
            return this;
        }
        right() {
            this.root.element.classList.remove("editor-left");
            this.root.element.classList.add("editor-right");
            return this;
        }
        theme(theme) {
            if (theme === this.currentTheme) {
                return;
            }
            this.root.element.classList.forEach((t) => {
                if (t.startsWith("editor-theme-")) {
                    this.root.element.classList.remove(t);
                }
            });
            this.themeSelect.value = theme;
            for (let i = 0; i < this.themeSelect.options.length; i++) {
                const option = this.themeSelect.options.item(i);
                if (option) {
                    option.selected = option.value === this.themeSelect.value;
                }
            }
            this.root.element.classList.add(`editor-theme-${theme}`);
            this.currentTheme = theme;
        }
        addTheme(theme) {
            const option = document.createElement("option");
            option.value = theme;
            option.text = theme;
            option.selected = theme === this.themeSelect.value;
            this.themeSelect.options.add(option);
        }
        themes() {
            return this._themes;
        }
        customize() {
        }
    }
    exports.Editor = Editor;
});
