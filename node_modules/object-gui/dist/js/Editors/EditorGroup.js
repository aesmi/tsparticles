(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./EditorItem", "./EditorButton", "./EditorStringInput", "./EditorNumberInput", "./EditorCheckboxInput", "./EditorSelectInput", "./EditorColorInput", "../Enums"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EditorGroup = void 0;
    const EditorItem_1 = require("./EditorItem");
    const EditorButton_1 = require("./EditorButton");
    const EditorStringInput_1 = require("./EditorStringInput");
    const EditorNumberInput_1 = require("./EditorNumberInput");
    const EditorCheckboxInput_1 = require("./EditorCheckboxInput");
    const EditorSelectInput_1 = require("./EditorSelectInput");
    const EditorColorInput_1 = require("./EditorColorInput");
    const Enums_1 = require("../Enums");
    class EditorGroup extends EditorItem_1.EditorItem {
        constructor(data, name, title, parent, collapsed, themeSelect) {
            super(data, () => document.createElement("div"));
            this.name = name;
            this.title = title;
            this.collapsed = collapsed;
            this.children = [];
            this.element.id = this.name;
            this.element.classList.add("editor", "editor-group");
            const divTitle = document.createElement("div");
            divTitle.classList.add("editor-item-title");
            const divName = document.createElement("div");
            divName.classList.add("editor-item-name");
            const b = document.createElement("b");
            b.textContent = this.title;
            divName.append(b);
            divTitle.append(divName);
            if (themeSelect) {
                const divTheme = document.createElement("div");
                divTheme.classList.add("editor-button-theme");
                divTheme.append(themeSelect);
                divTitle.append(divTheme);
            }
            const divCollapse = document.createElement("div");
            divCollapse.classList.add("editor-button-collapse");
            this.collapseButton = document.createElement("button");
            this.collapseButton.type = "button";
            this.collapseButton.addEventListener("click", () => {
                this.toggleCollapse();
            });
            divCollapse.append(this.collapseButton);
            divTitle.append(divCollapse);
            this.element.append(divTitle);
            this.childrenGroup = document.createElement("div");
            this.childrenGroup.classList.add("group-content");
            this.element.append(this.childrenGroup);
            parent.append(this.element);
            this.setCollapse();
        }
        static createRoot(name, title, data, parent, themeSelect) {
            return new EditorGroup(data, `${this.name}_${name}`, title, parent, false, themeSelect);
        }
        addGroup(name, title, collapsed = true, customParent) {
            const parentData = (customParent !== null && customParent !== void 0 ? customParent : this.data);
            if (!parentData[name]) {
                parentData[name] = {};
            }
            const data = parentData[name];
            const subGroup = new EditorGroup(data, `${this.name}_${name}`, title, this.childrenGroup, collapsed);
            this.children.push(subGroup);
            return subGroup;
        }
        addProperty(name, label, type, value, autoMap = true) {
            const divGroup = document.createElement("div");
            divGroup.classList.add("editor-element");
            const htmlLabel = document.createElement("label");
            htmlLabel.textContent = label;
            divGroup.append(htmlLabel);
            let item;
            const inputName = `${this.name}_${name}`;
            switch (type) {
                case Enums_1.EditorType.number:
                    item = new EditorNumberInput_1.EditorNumberInput(this.data, inputName, name, value, autoMap);
                    break;
                case Enums_1.EditorType.boolean:
                    item = new EditorCheckboxInput_1.EditorCheckboxInput(this.data, inputName, name, value, autoMap);
                    break;
                case Enums_1.EditorType.color:
                    item = new EditorColorInput_1.EditorColorInput(this.data, inputName, name, value, autoMap);
                    break;
                case Enums_1.EditorType.select:
                    item = new EditorSelectInput_1.EditorSelectInput(this.data, inputName, name, value, autoMap);
                    break;
                default:
                    item = new EditorStringInput_1.EditorStringInput(this.data, inputName, name, value, autoMap);
            }
            this.children.push(item);
            if (item.fullDom) {
                item.fullDom.classList.add("element-dom");
                divGroup.append(item.fullDom);
            }
            else {
                divGroup.append(item.element);
            }
            this.childrenGroup.append(divGroup);
            return item;
        }
        addButton(name, label, autoMap = true) {
            const button = new EditorButton_1.EditorButton(this.data, `${this.name}_${name}`, name, label, autoMap);
            this.children.push(button);
            this.childrenGroup.append(button.element);
            return button;
        }
        toggleCollapse() {
            this.updateCollapse(!this.collapsed);
        }
        updateCollapse(collapsed) {
            super.updateCollapse(collapsed);
            this.setCollapse();
        }
        setCollapse() {
            if (this.collapsed) {
                this.childrenGroup.style.display = "none";
                this.collapseButton.textContent = "Expand";
            }
            else {
                this.childrenGroup.style.display = "block";
                this.collapseButton.textContent = "Collapse";
            }
            for (const child of this.children) {
                if ((!(child instanceof EditorGroup) && !this.collapsed) || this.collapsed) {
                    child.updateCollapse(this.collapsed);
                }
            }
        }
    }
    exports.EditorGroup = EditorGroup;
});
