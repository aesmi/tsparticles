import { EditorItem } from "./EditorItem";
export declare abstract class EditorInputBase extends EditorItem {
    protected readonly id: string;
    protected readonly name: string;
    protected getDefaultValue: () => unknown;
    protected transformValue: (value: unknown) => unknown;
    protected getValueFromInput: (self: EditorInputBase) => unknown;
    protected setValueToInput: (self: EditorInputBase, value: unknown) => void;
    protected readonly autoMap: boolean;
    fullDom?: HTMLElement;
    protected value: unknown;
    private changeHandler?;
    protected constructor(data: unknown, createElement: () => HTMLElement, id: string, name: string, getDefaultValue: () => unknown, transformValue: (value: unknown) => unknown, getValueFromInput: (self: EditorInputBase) => unknown, setValueToInput: (self: EditorInputBase, value: unknown) => void, value?: unknown, autoMap?: boolean);
    change(changeHandler: (value: unknown) => void): EditorInputBase;
    protected changeEventHandler(): void;
    abstract step(step: number): EditorInputBase;
    abstract min(min: number): EditorInputBase;
    abstract max(max: number): EditorInputBase;
    abstract addItem(value: string, text?: string, group?: string): EditorInputBase;
    abstract addItems(values: {
        value: string;
        text?: string;
        group?: string;
    }[]): EditorInputBase;
    abstract addItemGroup(name: string): EditorInputBase;
}
