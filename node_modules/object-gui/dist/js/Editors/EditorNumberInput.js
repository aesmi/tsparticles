(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../Utils", "./EditorInputBase"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EditorNumberInput = void 0;
    const Utils_1 = require("../Utils");
    const EditorInputBase_1 = require("./EditorInputBase");
    class EditorNumberInput extends EditorInputBase_1.EditorInputBase {
        constructor(data, id, name, value, autoMap = true) {
            super(data, () => document.createElement("input"), id, name, () => 0, (v) => v, (self) => {
                var _a, _b;
                const numberSelf = self;
                const inputEl = numberSelf.element;
                const inputValue = parseFloat(inputEl.value);
                return Utils_1.Utils.clamp(inputValue, (_a = numberSelf._min) !== null && _a !== void 0 ? _a : inputValue, (_b = numberSelf._max) !== null && _b !== void 0 ? _b : inputValue);
            }, (self, v) => {
                var _a, _b;
                const numberSelf = self;
                const inputEl = numberSelf.element;
                const numValue = v;
                inputEl.value = Utils_1.Utils.clamp(numValue, (_a = numberSelf._min) !== null && _a !== void 0 ? _a : numValue, (_b = numberSelf._max) !== null && _b !== void 0 ? _b : numValue).toString();
            }, value, autoMap);
            const input = this.element;
            input.type = "number";
            this.fullDom = document.createElement("div");
            this.fullDom.append(this.element);
            input.addEventListener("change", () => {
                this.changeEventHandler();
            });
        }
        static getDragger(slider) {
            return slider.querySelector("span");
        }
        step(step) {
            this.element.step = step.toString(10);
            this._step = step;
            return this;
        }
        min(min) {
            this.element.min = min.toString(10);
            this._min = min;
            this.drawSlider();
            return this;
        }
        max(max) {
            this.element.max = max.toString(10);
            this._max = max;
            this.drawSlider();
            return this;
        }
        addItem() {
            return this;
        }
        addItemGroup() {
            return this;
        }
        addItems() {
            return this;
        }
        updateCollapse(collapsed) {
            super.updateCollapse(collapsed);
            const slider = this.getSlider();
            if (!slider) {
                return;
            }
            this.updateSliderData(slider);
            const dragger = EditorNumberInput.getDragger(slider);
            if (!dragger) {
                return;
            }
            this.updateDragger(dragger);
        }
        changeEventHandler() {
            super.changeEventHandler();
            const slider = this.getSlider();
            if (!slider) {
                return;
            }
            const dragger = EditorNumberInput.getDragger(slider);
            if (!dragger) {
                return;
            }
            this.updateDragger(dragger);
        }
        getSlider() {
            if (this._max === undefined || this._min === undefined) {
                return null;
            }
            const parent = this.fullDom;
            if (!parent) {
                return null;
            }
            return parent.querySelector(".range-slider");
        }
        updateSliderData(slider) {
            const rect = slider.getBoundingClientRect();
            this.slider = {
                left: rect.left,
                width: rect.width,
            };
        }
        updateDragger(dragger) {
            var _a, _b;
            if (!this.slider) {
                return;
            }
            const max = (_a = this._max) !== null && _a !== void 0 ? _a : 0;
            const min = (_b = this._min) !== null && _b !== void 0 ? _b : 0;
            const value = this.value;
            const denom = max - min;
            const width = denom !== 0 ? value / denom : 0;
            dragger.style.width = `${width * this.slider.width}px`;
        }
        updateDraggerEvent(e, down, dragger) {
            var _a, _b, _c;
            if (!this.slider || !down) {
                return;
            }
            const max = (_a = this._max) !== null && _a !== void 0 ? _a : 0;
            const min = (_b = this._min) !== null && _b !== void 0 ? _b : 0;
            const step = (_c = this._step) !== null && _c !== void 0 ? _c : 0;
            const width = Utils_1.Utils.clamp(e.pageX - this.slider.left, 0, this.slider.width);
            let value = Utils_1.Utils.clamp((width / this.slider.width) * (max - min) + min, min, max);
            if (step > 0) {
                value = Math.floor(value / step) * step;
            }
            dragger.style.width = `${width}px`;
            this.onDrag(value);
        }
        onDrag(value) {
            const input = this.element;
            input.value = value.toString(10);
            this.changeEventHandler();
        }
        drawSlider() {
            var _a, _b;
            if (this._max === undefined || this._min === undefined) {
                return;
            }
            const parent = this.fullDom;
            if (!parent) {
                return;
            }
            const range = parent.querySelector(".range-slider");
            if (range) {
                return;
            }
            this.element.classList.add("slider-input");
            const slider = document.createElement("div");
            slider.classList.add("range-slider");
            slider.appendChild(document.createElement("span"));
            parent.insertBefore(slider, this.element);
            const rect = slider.getBoundingClientRect();
            this.slider = {
                left: rect.left,
                width: rect.width,
            };
            const dragger = slider.children[0];
            let down = false;
            const max = (_a = this._max) !== null && _a !== void 0 ? _a : 0;
            const min = (_b = this._min) !== null && _b !== void 0 ? _b : 0;
            const value = this.value;
            const denom = Math.abs(max) + Math.abs(min);
            const width = denom !== 0 ? value / denom : 0;
            dragger.style.width = `${width * this.slider.width}px`;
            dragger.style.left = "0px";
            dragger.style.marginLeft = "0px";
            slider.addEventListener("mousedown", (e) => {
                if (!e.target) {
                    return;
                }
                down = true;
                this.updateDraggerEvent(e, down, dragger);
                return false;
            });
            document.addEventListener("mousemove", (e) => {
                this.updateDraggerEvent(e, down, dragger);
            });
            document.addEventListener("mouseup", () => {
                down = false;
            });
            window.addEventListener("resize", () => {
                const r = slider.getBoundingClientRect();
                this.slider = {
                    left: r.left,
                    width: r.width,
                };
                this.updateDragger(dragger);
            });
        }
    }
    exports.EditorNumberInput = EditorNumberInput;
});
