(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./EditorInputBase"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EditorSelectInput = void 0;
    const EditorInputBase_1 = require("./EditorInputBase");
    class EditorSelectInput extends EditorInputBase_1.EditorInputBase {
        constructor(data, id, name, value, autoMap = true) {
            super(data, () => document.createElement("select"), id, name, () => "", (v) => v, (self) => {
                const input = self.element;
                return input.value;
            }, (self, v) => {
                const input = self.element;
                input.value = v;
            }, value, autoMap);
            const select = this.element;
            select.addEventListener("change", () => {
                this.changeEventHandler();
            });
        }
        addItem(value, text, group) {
            const select = this.element;
            const item = document.createElement("option");
            const groupElement = select.querySelector(`[label=${group}]`);
            item.value = value;
            item.text = text !== null && text !== void 0 ? text : value;
            item.selected = this.value === value;
            (groupElement !== null && groupElement !== void 0 ? groupElement : select).append(item);
            return this;
        }
        addItems(values) {
            for (const value of values) {
                this.addItem(value.value, value.text, value.group);
            }
            return this;
        }
        addItemGroup(name) {
            const select = this.element;
            const group = document.createElement("optgroup");
            group.label = name;
            select.append(group);
            return this;
        }
        max() {
            return this;
        }
        min() {
            return this;
        }
        step() {
            return this;
        }
    }
    exports.EditorSelectInput = EditorSelectInput;
});
