(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../Utils", "./EditorInputBase"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EditorColorInput = void 0;
    const Utils_1 = require("../Utils");
    const EditorInputBase_1 = require("./EditorInputBase");
    class EditorColorInput extends EditorInputBase_1.EditorInputBase {
        constructor(data, id, name, value, autoMap = true) {
            super(data, () => document.createElement("input"), id, name, () => "", (v) => {
                let colorStringValue;
                if (v === undefined) {
                    colorStringValue = undefined;
                }
                else if (typeof v === "string") {
                    colorStringValue = v;
                }
                else {
                    let rgb = v;
                    const hsl = v;
                    if (hsl.h !== undefined && hsl.l !== undefined) {
                        rgb = Utils_1.ColorUtils.hslToRgb(hsl);
                    }
                    else {
                        const hsv = v;
                        if (hsv.h !== undefined && hsv.v !== undefined) {
                            rgb = Utils_1.ColorUtils.hsvToRgb(hsv);
                        }
                    }
                    const r = rgb.r.toString(16).padStart(2, "0"), g = rgb.g.toString(16).padStart(2, "0"), b = rgb.b.toString(16).padStart(2, "0");
                    colorStringValue = `#${r}${g}${b}`;
                }
                return colorStringValue;
            }, (self) => {
                const inputEl = self.element;
                return inputEl.value;
            }, (self, v) => {
                const inputEl = self.element;
                inputEl.value = v;
            }, value, autoMap);
            this.fullDom = document.createElement("div");
            this.colorInput = document.createElement("input");
            this.colorInput.type = "color";
            this.colorInput.value = this.value;
            this.fullDom.append(this.colorInput);
            const input = this.element;
            input.type = "text";
            this.fullDom.append(this.element);
            this.updateStyle(input.value);
            input.addEventListener("change", () => {
                const colorInput = this.element;
                this.colorInput.value = colorInput.value;
                this.changeEventHandler();
            });
            this.colorInput.addEventListener("change", () => {
                const colorInput = this.element;
                colorInput.value = this.colorInput.value;
                this.changeEventHandler();
            });
        }
        static textColor(value) {
            if (value === undefined) {
                return undefined;
            }
            const rgb = Utils_1.ColorUtils.stringToRgb(value);
            if (!rgb) {
                return undefined;
            }
            const color = Math.round((rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000);
            return color > 125 ? "#000" : "#fff";
        }
        step() {
            return this;
        }
        min() {
            return this;
        }
        max() {
            return this;
        }
        addItem() {
            return this;
        }
        addItems() {
            return this;
        }
        addItemGroup() {
            return this;
        }
        changeEventHandler() {
            super.changeEventHandler();
            this.updateStyle(this.value);
        }
        updateStyle(bgColor) {
            const rgb = Utils_1.ColorUtils.stringToRgb(bgColor);
            if (!rgb) {
                this.element.style.backgroundColor = "";
                this.colorInput.style.backgroundColor = "";
            }
            else {
                this.element.style.backgroundColor = bgColor;
                this.colorInput.style.backgroundColor = bgColor;
            }
            const textColor = EditorColorInput.textColor(bgColor);
            if (textColor !== undefined) {
                this.element.style.color = textColor;
                this.colorInput.style.color = textColor;
            }
            else {
                this.element.style.color = "";
                this.colorInput.style.color = "";
            }
        }
    }
    exports.EditorColorInput = EditorColorInput;
});
