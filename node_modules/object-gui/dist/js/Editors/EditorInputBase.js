(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./EditorItem"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EditorInputBase = void 0;
    const EditorItem_1 = require("./EditorItem");
    class EditorInputBase extends EditorItem_1.EditorItem {
        constructor(data, createElement, id, name, getDefaultValue, transformValue, getValueFromInput, setValueToInput, value, autoMap = true) {
            super(data, createElement);
            this.id = id;
            this.name = name;
            this.getDefaultValue = getDefaultValue;
            this.transformValue = transformValue;
            this.getValueFromInput = getValueFromInput;
            this.setValueToInput = setValueToInput;
            this.autoMap = autoMap;
            const input = this.element;
            const obj = this.data;
            input.id = `input_${this.id}`;
            this.value = transformValue(value !== null && value !== void 0 ? value : (this.autoMap ? obj[this.name] : this.getDefaultValue()));
            this.setValueToInput(this, this.value);
        }
        change(changeHandler) {
            this.changeHandler = changeHandler;
            return this;
        }
        changeEventHandler() {
            this.value = this.getValueFromInput(this);
            if (this.autoMap) {
                const obj = this.data;
                obj[this.name] = this.value;
            }
            if (this.changeHandler) {
                this.changeHandler(this.value);
            }
        }
    }
    exports.EditorInputBase = EditorInputBase;
});
